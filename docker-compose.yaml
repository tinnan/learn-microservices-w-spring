services:
  postgres-customer:
    container_name: postgres-customer
    image: postgres
    profiles:
      - dev
      - integrate
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - postgres-customer:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres-customer
    restart: unless-stopped
  postgres-fraud:
    container_name: postgres-fraud
    image: postgres
    profiles:
      - dev
      - integrate
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - postgres-fraud:/data/postgres
    ports:
      - "5433:5432"
    networks:
      - postgres-fraud
    restart: unless-stopped
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    profiles:
      - dev
      - integrate
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres-customer
      - postgres-fraud
    restart: unless-stopped
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    profiles:
      - dev
      - integrate
    ports:
      - "9411:9411"
    networks:
      - spring
  rabbitmq:
    image: rabbitmq:3.9.11-management-alpine
    container_name: rabbitmq
    profiles:
      - dev
      - integrate
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - spring
  eureka-server:
    image: tinnan/eureka-server:latest
    container_name: eureka-server
    profiles:
      - integrate
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
    depends_on:
      - zipkin
#  apigw:
#    image: amigoscode/apigw:latest
#    container_name: apigw
#    ports:
#      - "8083:8083"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    networks:
#      - spring
#    depends_on:
#      - zipkin
#      - eureka-server
  customer:
    image: tinnan/customer:latest
    container_name: customer
    profiles:
      - integrate
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres-customer
    depends_on:
      - zipkin
      - postgres-customer
      - rabbitmq
  fraud:
    image: tinnan/fraud:latest
    container_name: fraud
    profiles:
      - integrate
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres-fraud
    depends_on:
      - zipkin
      - postgres-fraud
      - rabbitmq
  notification:
    image: tinnan/notification:latest
    container_name: notification
    profiles:
      - integrate
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - mongo
    depends_on:
      - zipkin
      - rabbitmq
      - mongo
  mongo:
    image: mongo
    container_name: mongodb
    profiles:
      - dev
      - integrate
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      # This is the database to run creation script /docker-entrypoint-initdb.d/*.js
      # But database to run script can also be switched from inside the script.
#      MONGO_INITDB_DATABASE: notification
    ports:
      - 27017:27017
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - mongo
#    mongo-express:
#      image: mongo-express
#      restart: always
#      profiles:
#        - dev
#        - integrate
#      ports:
#        - 8081:8081
#      environment:
#        ME_CONFIG_MONGODB_ADMINUSERNAME: root
#        ME_CONFIG_MONGODB_ADMINPASSWORD: example
#        ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
networks:
  postgres-customer:
    driver: bridge
  postgres-fraud:
    driver: bridge
  spring:
    driver: bridge
  mongo:
    driver: bridge

volumes:
  postgres-customer:
  postgres-fraud:
  pgadmin: